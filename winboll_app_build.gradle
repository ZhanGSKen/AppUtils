// WinBoll 应用签名配置
//
android {
    // 读取秘钥配置文件
    //
    def keyProps = new Properties()
    def keyPropsFile = rootProject.file('keystore/appkey.keystore')
    assert(keyPropsFile.exists())
    keyProps.load(new FileInputStream(keyPropsFile))
    
    // 配置签名
    signingConfigs {
        winboll {
            assert(keyProps['keyAlias'] != null && keyProps['keyPassword'] != null && keyProps['storeFile'] != null && keyProps['storePassword'] != null)
            keyAlias keyProps['keyAlias']
            keyPassword keyProps['keyPassword']
            storeFile keyProps['storeFile'] ? file(keyProps['storeFile']) : null
            storePassword keyProps['storePassword']
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.winboll
        }
        debug {
            signingConfig signingConfigs.winboll
        }
    }
    
    flavorDimensions "WinBollApp"
    productFlavors {
        beta {
            // 读取编译标志位配置文件
            def buildProps = new Properties()
            def buildPropsFile = rootProject.file("${buildPropsFileName}")
            assert(buildPropsFile.exists())
            buildProps.load(new FileInputStream(buildPropsFile))
            assert (buildProps['buildCount'] != null)
            dimension "WinBollApp"
            applicationIdSuffix ".beta"
            LocalDateTime localDateTimeNow = LocalDateTime.now(ZoneId.of("Asia/Shanghai"));
            versionNameSuffix "-beta" + buildProps['buildCount'] + "_" + localDateTimeNow.format('mmss')
        }
        stage {
            dimension "WinBollApp"
        }
    }
    //
    // 应用包输出配置
    // 1. 配置 Stage Release 版应用包输出
    // 2. 配置 Beta Debug 版应用包输出
    //
    android.applicationVariants.all { variant ->
        if((variant.flavorName == "beta"&&variant.buildType.name == "debug")
        || (variant.flavorName == "stage"&&variant.buildType.name == "release")) {
            def outputPath="${project.projectDir.absolutePath}/build/outputs/apk/${variant.buildType.name}"
            def outputFileName="${rootProject.name}_${versionName}.apk"
            
            // 创建 WinBoll Studio 接口文件夹
            File fWinBollStudioDir = file("/sdcard/WinBollStudio/APKs");
            if(!fWinBollStudioDir.exists()) {
                fWinBollStudioDir.mkdirs();
            }
            
            variant.getAssembleProvider().get().doFirst {
                if(variant.flavorName == "stage"&&variant.buildType.name == "release"){
                    // 给源码做标签
                    // 读取编译标志位配置文件
                    def result = exec {
                        //commandLine 'bash', '--', "${bashCheckGitPath}", "${RootProjectDir}", "6.0.4"
                        //commandLine 'bash', '--', "${bashCheckGitPath}", "${RootProjectDir}", "9.9.9"
                        commandLine 'bash', '--', "${bashCheckGitPath}", "${RootProjectDir}", "${versionName}"
                        //standardOutput = true
                        // 根据需要，可以添加错误输出
                        //standardError = true
                    }
                    // make_git_tag.sh Git标签设置成功会返回0，
                    // 此处断言可以阻止标签失败的发布行为
                    // 获取bash命令的输出
                    //def output = result.text
                    // 检查bash命令的返回值（假设非零表示失败）
                    assert(result.getExitValue() == 0)
                }
            } //doFirst {
            
            // 编译输出后处理文件
            variant.getAssembleProvider().get().doLast {
                // 开始处理输出文件
                //
                
                    variant.outputs.forEach{ file->
                        // 拷贝到 WinBoll 标签管理文件夹
                        //
                        if(variant.flavorName == "stage"&&variant.buildType.name == "release"){
                            // 给源码做标签
                            //
                            // 读取编译标志位配置文件
                            def result = exec {
                                //commandLine 'bash', '--', "${bashCheckGitPath}", "${RootProjectDir}", "6.0.4"
                                //commandLine 'bash', '--', "${bashCheckGitPath}", "${RootProjectDir}", "9.9.9"
                                commandLine 'bash', '--', "${bashSetGitTagPath}", "${RootProjectDir}", "${versionName}"
                                //standardOutput = true
                                // 根据需要，可以添加错误输出
                                //standardError = true
                            }
                            // Git标签设置成功会返回0，
                            // 此处断言可以阻止标签失败的发布行为
                            // 检查bash命令的返回值（假设非零表示失败）
                            assert(result.getExitValue() == 0)
                        
                            // 发布 APK 文件
                            //
                            // 截取版本号的版本字段为短版本名
                            String szVersionName = "${versionName}"
                            String[] szlistTemp = szVersionName.split("-")
                            String szShortVersionName = szlistTemp[0]
                            String szCommonTagAPKName = "${rootProject.name}_" + szShortVersionName + ".apk"
                            println "CommonTagAPKName is : " + szCommonTagAPKName
                            
                            File outTagDir = new File(fWinBollStudioDir, "/${rootProject.name}/tag/")
                            // 创建目标路径目录
                            if(!outTagDir.exists()) {
                                outTagDir.mkdirs();
                                println "Output Folder Created.(Tags) : " + outTagDir.getAbsolutePath()
                            }
                            
                            if(outTagDir.exists()) {
                                File targetAPK = new File(outTagDir, "${szCommonTagAPKName}")
                                if(targetAPK.exists()) {
                                    // 标签版本APK文件已经存在，构建拷贝任务停止
                                    assert (!targetAPK.exists())
                                    // 可选择删除并继续输出APK文件
                                    //delete targetAPK
                                }
                                // 复制一个备份
                                copy{
                                    from file.outputFile
                                    into outTagDir
                                    rename {
                                        String fileName -> "${outputFileName}"
                                    }
                                    println "Output APK (Tags): "+ outTagDir.getAbsolutePath() + "/${outputFileName}"
                                }
                                // 复制一个并重命名为短版本名
                                copy{
                                    from file.outputFile
                                    into outTagDir
                                    rename {
                                        String fileName -> "${szCommonTagAPKName}"
                                    }
                                    println "Output APK (Tags): "+ outTagDir.getAbsolutePath() + "/${szCommonTagAPKName}"
                                }
                                // 读取编译标志位配置文件
                                def buildProps = new Properties()
                                def buildPropsFile = rootProject.file("${buildPropsFileName}")
                                // 如果编译标志位配置文件不存在，就设置断言
                                assert (buildPropsFile.exists())
                                buildProps.load(new FileInputStream(buildPropsFile))
                                assert (buildProps['stageCount'] != null && buildProps['buildCount'] != null)
                                int stageCount = Integer.parseInt(buildProps['stageCount']) + 1;
                                FileOutputStream fos = new FileOutputStream(buildPropsFile)
                                // 发布计数增加
                                buildProps.setProperty("stageCount", Integer.toString(stageCount));
                                //构建计数重置
                                buildProps.setProperty("buildCount", "0");
                                // 保存数据
                                buildProps.store(fos, "These properties created by winboll_app_build.gradle.");
                                fos.close();
                            }
                        } //  if(variant.buildType.name == "release"){
                    
                        
                        // 拷贝到 WinBoll 备份管理文件夹
                        //
                        File outBuildBckDir = new File(fWinBollStudioDir, "/${rootProject.name}/${variant.buildType.name}")
                        // 创建目标路径目录
                        if(!outBuildBckDir.exists()) {
                            outBuildBckDir.mkdirs();
                            println "Output Folder Created.(WinBollStudio) : " + outBuildBckDir.getAbsolutePath()
                        }
                        if(outBuildBckDir.exists()) {
                            copy{
                                from file.outputFile
                                into outBuildBckDir
                                rename {
                                    String fileName -> "${outputFileName}"
                                }
                                println "Output APK (WinBollStudio): " + outBuildBckDir.getAbsolutePath() + "/${outputFileName}"
                            }
                            // 读取编译标志位配置文件
                            def buildProps = new Properties()
                            def buildPropsFile = rootProject.file("${buildPropsFileName}")
                            // 如果编译标志位配置文件不存在，就设置断言
                            assert (buildPropsFile.exists())
                            buildProps.load(new FileInputStream(buildPropsFile))
                            assert (buildProps['buildCount'] != null)
                            //构建计数增加
                            int buildCount = Integer.parseInt(buildProps['buildCount']) + 1;
                            // 保存数据
                            FileOutputStream fos = new FileOutputStream(buildPropsFile)
                            buildProps.setProperty("buildCount", Integer.toString(buildCount));
                            buildProps.store(fos, "These properties created by winboll_app_build.gradle.");
                            fos.close();
                        }
                        
                        // 如果公共目录存在就拷贝到公共目录并重命名为app.apk
                        //
                        File outCommonDir = new File("/sdcard/AppProjects")
                        String commandAPKName = "app.apk"
                        if(outCommonDir.exists()) {
                            copy{
                                from file.outputFile
                                into outCommonDir
                                rename {
                                    String fileName -> "${commandAPKName}"
                                }
                                println "Output APK (Common): " + outCommonDir.getAbsolutePath() + "/${commandAPKName}"
                            }
                        }
                        
                    
                }
            }// End of (variant.getAssembleProvider().get().doLast {)
            ////////编译输出结束 /////
        }
        
    } // End of (android.applicationVariants.all { variant ->)
}

